#include <iostream>
#include <vector>

enum class Cell { EMPTY, PLAYER_1, PLAYER_2 };
enum class GameState { ONGOING, PLAYER_1_WINS, PLAYER_2_WINS, DRAW };

class TicTacToe {
private:
    std::vector<std::vector<Cell>> board;
    GameState state;
    int currentPlayer;

public:
    TicTacToe() {
        board = std::vector<std::vector<Cell>>(3, std::vector<Cell>(3, Cell::EMPTY));
        state = GameState::ONGOING;
        currentPlayer = 1;
    }

    void makeBoard() {
        // Print the game board
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                char c = ' ';
                if (board[i][j] == Cell::PLAYER_1) c = 'X';
                if (board[i][j] == Cell::PLAYER_2) c = 'O';
                std::cout << c << (j < 2 ? "|" : "");
            }
            std::cout << std::endl;
            if (i < 2) std::cout << "-----\n";
        }
        std::cout << std::endl;
    }

    void play() {
        int row, col;
        while (state == GameState::ONGOING) {
            makeBoard();
            std::cout << "Player " << currentPlayer << ", enter your move (row and column): ";
            std::cin >> row >> col;
            
            // Input validation
            if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != Cell::EMPTY) {
                std::cout << "Invalid move! Try again.\n";
                continue;
            }

            // Mark the board
            board[row][col] = (currentPlayer == 1) ? Cell::PLAYER_1 : Cell::PLAYER_2;

            // Check the game status
            state = gameStatus();

            // Switch player
            currentPlayer = (currentPlayer == 1) ? 2 : 1;
        }

        makeBoard();
        printGameResult();
    }

    GameState gameStatus() {
        // Check rows, columns, and diagonals for a winner
        for (int i = 0; i < 3; ++i) {
            // Check rows
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != Cell::EMPTY)
                return (board[i][0] == Cell::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
            // Check columns
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != Cell::EMPTY)
                return (board[0][i] == Cell::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
        }

        // Check diagonals
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != Cell::EMPTY)
            return (board[0][0] == Cell::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != Cell::EMPTY)
            return (board[0][2] == Cell::PLAYER_1) ? GameState::PLAYER_1_WINS : GameState::PLAYER_2_WINS;

        // Check for draw (if all cells are filled)
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                if (board[i][j] == Cell::EMPTY)
                    return GameState::ONGOING;

        return GameState::DRAW;
    }

    void printGameResult() {
        switch (state) {
            case GameState::PLAYER_1_WINS: std::cout << "Player 1 wins!\n"; break;
            case GameState::PLAYER_2_WINS: std::cout << "Player 2 wins!\n"; break;
            case GameState::DRAW: std::cout << "It's a draw!\n"; break;
            default: break;
        }
    }

    static void printRules() {
        std::cout << "Tic-Tac-Toe Game Rules:\n";
        std::cout << "1. Players take turns to place their mark (X or O) on the board.\n";
        std::cout << "2. The first player to get three marks in a row (horizontally, vertically, or diagonally) wins.\n";
        std::cout << "3. If all spaces are filled and no player wins, the game is a draw.\n";
        std::cout << "4. Players must input row and column values (0, 1, 2).\n\n";
    }

    bool playAgain() {
        char choice;
        std::cout << "Do you want to play again? (y/n): ";
        std::cin >> choice;
        return (choice == 'y' || choice == 'Y');
    }
};

int main() {
    TicTacToe game;
    game.printRules();

    do {
        game = TicTacToe(); // Reset the game
        game.play();
    } while (game.playAgain());

    return 0;
}
